# -*- coding: utf-8 -*-
"""audio_augmentation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KrUm2DonUDAa_4LFO0pdKlrI_g7_Fvz4
"""

import numpy as np
import librosa

def add_echo(data, sampling_rate, delay_range=(0.1, 0.4), decay=0.5):
    delay = np.random.uniform(delay_range[0], delay_range[1])
    delay_samples = int(delay * sampling_rate)
    echo = np.concatenate((np.zeros(delay_samples), data[:-delay_samples] * decay))
    mixed_data = data + echo
    return mixed_data

def add_background_noise(data, background_noise_path, noise_level=1.35):
    background_noise, _ = librosa.load(background_noise_path, sr=None, duration=3)
    if len(background_noise) < len(data):
        raise ValueError("Background noise duration is shorter than the input data duration")
    if len(background_noise) > len(data):
        background_noise = background_noise[:len(data)]
    else:
        background_noise = np.pad(background_noise, (0, len(data) - len(background_noise)))

    noise_amp = noise_level * np.random.uniform() * np.amax(data)
    background_noise = background_noise * noise_amp / np.max(background_noise)
    mixed_data = data + background_noise
    return mixed_data

def stretch(data, min_rate=0.7, max_rate=1.3):
    rate = np.random.uniform(min_rate, max_rate)
    return librosa.effects.time_stretch(data, rate)

def shift(data, max_shift=500):
    shift_amount = np.random.randint(-max_shift, max_shift)
    return np.roll(data, shift_amount)

def add_reverb(data, sample_rate, delay_factor=0.8, decay=0.8):
    delay_samples = int(delay_factor * sample_rate)
    delayed_data = np.concatenate((np.zeros(delay_samples), data[:-delay_samples]))
    reverb_data = data + decay * delayed_data
    return reverb_data