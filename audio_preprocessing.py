# -*- coding: utf-8 -*-
"""audio_preprocessing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1immylnIhPbSrtL600avYRqvpZFRfZEq2
"""

import numpy as np
import librosa

def normalize_audio(data):
    return data / np.max(np.abs(data))

def trim_silences(data):
    trimmed_data, _ = librosa.effects.trim(data)
    return trimmed_data

def match_duration(audio, target_duration, sr):
    target_length = int(target_duration * sr)
    if len(audio) < target_length:
        repeats = target_length // len(audio) + 1
        audio = np.tile(audio, repeats)[:target_length]
    elif len(audio) > target_length:
        audio = audio[:target_length]
    return audio

def get_features(path, background_noise_path, target_sample_rate=16000, target_duration=3.0):
    try:
        data, sample_rate = librosa.load(path, sr=target_sample_rate)
        trimmed_data = trim_silences(data)
        normalized_data = normalize_audio(trimmed_data)

        normalized_data = match_duration(normalized_data, target_duration, target_sample_rate)

        features_list = []
        res1 = extract_features(normalized_data, sample_rate)
        features_list.append(res1)

        noise_data = add_background_noise(normalized_data, background_noise_path)
        res2 = extract_features(noise_data, sample_rate)
        features_list.append(res2)

        return np.vstack(features_list)

    except Exception as e:
        print(f"Error processing file: {path}")
        print(f"Error details: {str(e)}")
        return None